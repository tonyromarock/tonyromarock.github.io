<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Place for Asides - Python</title><link href="https://tonyromarock.github.io/" rel="alternate"></link><link href="https://tonyromarock.github.io/feeds/python.atom.xml" rel="self"></link><id>https://tonyromarock.github.io/</id><updated>2018-10-30T23:00:00+01:00</updated><entry><title>Using binvox-rw-py with Python 3</title><link href="https://tonyromarock.github.io/blog/binvox-rw-py3.html" rel="alternate"></link><published>2018-10-30T23:00:00+01:00</published><updated>2018-10-30T23:00:00+01:00</updated><author><name>Peter Mortimer</name></author><id>tag:tonyromarock.github.io,2018-10-30:/blog/binvox-rw-py3.html</id><summary type="html">&lt;p&gt;My notes to using binvox-rw-py with Python 3.&lt;/p&gt;</summary><content type="html">&lt;h1 style="visibility:hidden;"&gt;Using binvox-rw-py with Python 3&lt;/h1&gt;

&lt;p&gt;The Python project &lt;strong&gt;binvox-rw-py&lt;/strong&gt; is based on the &lt;a href="https://www.patrickmin.com/binvox/"&gt;binvox&lt;/a&gt; project from Patrick Min. It is a simple and easy-to-use tool to convert 3D model files into 3D voxel grids (it supports most of the common 3D model file formats: .obj, .ply, .stl; the output format is typically the custom &lt;strong&gt;.binvox&lt;/strong&gt; file format).&lt;/p&gt;
&lt;p&gt;Some research projects in the field of 3D machine learning may use this library to create voxelized scenes for training. These voxelized scenes are used to train networks to learn a rudimentary understanding of the scene's geometry in a more easily quantifiable way. This is how I stumbled upon the &lt;a href="https://github.com/dimatura/binvox-rw-py"&gt;binvox-rw-py&lt;/a&gt; module, which enables you to read .binvox files as 3-dimensional Numpy arrays in Python. You can also write numpy arrays into .binvox using binvox-rw-py.&lt;/p&gt;
&lt;h3&gt;Troubles with writing .binvox files in Python 3&lt;/h3&gt;
&lt;p&gt;The original binvox-rw-py from the GitHub user &lt;a href="https://github.com/dimatura/"&gt;dimatura&lt;/a&gt; has issues with writing .binvox files when running it in Python 3, since it was implemented with the byte handling of Python 2 in mind. I discovered this after a few frustrating hours by simply reading and writing the same .binvox file I generated for my project and comparing the resulting voxelized scenes using &lt;a href="https://www.patrickmin.com/viewvox/"&gt;viewvox&lt;/a&gt; (which is also from Patrick Min):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Comparing the resulting voxelized scenes when reading and writing the same .binvox file using binvox-rw-py with Python 3. The left image shows the broken scene voxelization using dimatura's module with Python 3, while the right image shows the correct scene voxelization using pclausen's module with Python 3." src="https://tonyromarock.github.io/images/binvox/binvox_write_compare.png"&gt;&lt;/p&gt;
&lt;p&gt;Luckly, the GitHub user &lt;a href="https://github.com/pclausen/"&gt;pclausen&lt;/a&gt; has already created a forked version of the &lt;a href="https://github.com/pclausen/binvox-rw-py"&gt;binvox-rw-py&lt;/a&gt; module that resolves this issue. This makes it possible to also use binvox-rw-py with Python 3.&lt;/p&gt;
&lt;p&gt;Unfortunately, the fixed binvox-rw-py module by pclausen does not seem as well known as the original module by dimatura if you compare the number of stars for each GitHub repository (at the time of writing dimatura's repository has 69 stars, while pclausen's repo only has 2 stars). pclausen has even originally created an &lt;a href="https://github.com/dimatura/binvox-rw-py/issues/3"&gt;issue&lt;/a&gt; in dimatura's issue tracker for the binvox-rw-py regarding the Python 3 writing issue. The issue has not been closed even until today.&lt;/p&gt;
&lt;p&gt;So I hope this post could help someone, who has been having issues using binvox-rw-py with Python 3 and save the person some time when trying to find the bug in his code.&lt;/p&gt;
&lt;p&gt;To install pclausen's binvox-rw-py module using pip, simply write the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install git+https://github.com/pclausen/binvox-rw-py
&lt;/pre&gt;&lt;/div&gt;</content><category term="binvox"></category><category term="pip"></category></entry><entry><title>Installing pip for Python in Blender</title><link href="https://tonyromarock.github.io/blog/pip-blender-python.html" rel="alternate"></link><published>2018-09-30T18:05:00+02:00</published><updated>2018-09-30T18:05:00+02:00</updated><author><name>Peter Mortimer</name></author><id>tag:tonyromarock.github.io,2018-09-30:/blog/pip-blender-python.html</id><summary type="html">&lt;p&gt;A short guide on how to install pip for the Python version bundled with Blender.&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you are working on a Computer Vision project in Python that requires 3D scene renderings, then &lt;a href="https://www.blender.org/"&gt;Blender&lt;/a&gt; is the way to go. Blender comes bundled with its own Python version, which can be used to write Python scripts for Blender. This is useful for automating rendering jobs, since Python in Blender provides you the &lt;strong&gt;bpy&lt;/strong&gt; module, which gives you access to Blender data, classes, and functions. &lt;/p&gt;
&lt;p&gt;Unfortunately, the Python in Blender does not share libraries with your system's Python. But if you don't want to be limited to the Python Standard Library available for Python in Blender, then you can install pip for Python in Blender.&lt;/p&gt;
&lt;p&gt;The blender Python binaries are here in the blender directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/your-blender-path/2.xx/python/bin/python.exe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use this python binary to run the &lt;a href="https://bootstrap.pypa.io/get-pip.py"&gt;get-pip.py&lt;/a&gt; script from the &lt;a href="https://pip.pypa.io/en/stable/installing/"&gt;pip documentation&lt;/a&gt; to install pip for Python in Blender. Don't forget to point explicitly to the python binary from your blender version. The installation command will look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/your-blender-path/2.xx/python/bin/python.exe /Downloads/get-pip.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I ran the installation on Windows, which required me to open a Terminal with admin priviliges to execute the &lt;strong&gt;pip.exe&lt;/strong&gt;. Use this version of pip from Python in Blender (not the pip from your system's Python) to install 3rd party modules for Blender in Python: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/your-blender-path/2.xx/python.exe pip install module
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should allow you to install 3rd party modules for your scripts in Python in Blender.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;Read these StackExchange questions for more information on installing pip for Python in Blender. My post is based on their answers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blender.stackexchange.com/questions/5596/advantages-of-using-python-in-blender-for-animation"&gt;Advantages of using Python in Blender for Animation?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blender.stackexchange.com/questions/1365/how-can-i-run-blender-from-command-line-or-a-python-script-without-opening-a-gui"&gt;How can I run blender from command line or a python script without opening a GUI?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blender.stackexchange.com/questions/56011/how-to-use-pip-with-blenders-bundled-python"&gt;How to use PIP with Blender's bundled Python?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Blender"></category><category term="pip"></category></entry><entry><title>Installing legacy PyTorch for Windows</title><link href="https://tonyromarock.github.io/blog/legacy-pytorch-750m.html" rel="alternate"></link><published>2018-09-12T14:20:00+02:00</published><updated>2018-09-12T14:20:00+02:00</updated><author><name>Peter Mortimer</name></author><id>tag:tonyromarock.github.io,2018-09-12:/blog/legacy-pytorch-750m.html</id><summary type="html">&lt;p&gt;Some helpful notes when installing Pytorch 0.3.0 on a Windows PC with a GeForce GT 750M.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It can be useful to have a working version of PyTorch installed on your outdated local Windows machine to be able to run the prediction of pre-trained models written in PyTorch. I encountered a few roadblocks during my installation, where I really wished for more information on the web somewhere. Therefore, here are some notes I have made while installing PyTorch on my outdated laptop (Acer Aspire from 2013).&lt;/p&gt;
&lt;p&gt;You cannot run the most recent version of PyTorch (0.4.0 at the time of writing) with GPU support on an older machine with an outdated graphics card. In my case my Acer Aspire from 2013 has a NVIDIA GeForce GT 750M. The GeForce GT 750M has a CUDA compute capability of 3.0. You can look up the compute capability of all CUDA GPUs on &lt;a href="https://developer.nvidia.com/cuda-gpus"&gt;this official NVIDIA page&lt;/a&gt;.
The most recent version of PyTorch that still supports a GPU with a compute capability of 3.0 is PyTorch 0.3.0.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/peterjc123/pytorch-scripts"&gt;This GitHub repository&lt;/a&gt; from user &lt;strong&gt;peterjc123&lt;/strong&gt; is very helpful when trying to install PyTorch on Windows. The windows-specific PyTorch packages are available as conda packages here. 
The README of this repository also refers to a &lt;a href="https://drive.google.com/drive/folders/0B-X0-FlSGfCYdTNldW02UGl4MXM"&gt;Google Drive&lt;/a&gt; that includes conda packages for legacy versions of PyTorch for Windows. Here you have to check for the correct conda package. In my case I am running Python 3.6 and CUDA 8.0. I had to download the following compressed package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pytorch_legacy-0.3.0-py36_0.3.0cu80.tar.bz2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Move the compressed conda package to your working directory. Now you can locally install this conda package in your conda environment with the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda install --offline pytorch_legacy-0.3.0-py36_0.3.0cu80.tar.bz2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can quickly check if this version of PyTorch correctly detects the CUDA installation in your Python interpreter with the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;torch&lt;/span&gt;
&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cuda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_available&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If this returns &lt;strong&gt;True&lt;/strong&gt; then you should be ready to run legacy PyTorch on Windows.&lt;/p&gt;</content><category term="legacy PyTorch"></category><category term="Windows"></category><category term="GeForce GT 750M"></category></entry></feed>